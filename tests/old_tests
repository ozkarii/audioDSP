if (toLowerCase(args[1]) == "test")
    {
        if (args[2] == "--fft") 
        {
            cVector a = {2, 3, 4, 1, 3, 5, 29, 1};
            cVector b = {6, -2, 3, 9};

            std::vector<double> a_real = {2, 3, 4, 1, 3, 5, 29, 1};
            std::vector<double> b_real = {6, -2, 3, 9};

            printVector(a, "a:");
            printVector(b, "b:");

            DSP::zeroPad(a);
            DSP::zeroPad(b);

            printVector(a, "a_0:");
            printVector(b, "b_0:");

            cVector a_fft = DSP::fft(a);
            cVector b_fft = DSP::fft(b);

            printVector(a_fft, "fft_a:");
            printVector(b_fft, "fft_b:");

            std::vector<double> a_ifft = DSP::ifft(a_fft);
            std::vector<double> b_ifft = DSP::ifft(b_fft);

            printVector(a_ifft, "ifft_a:");
            printVector(b_ifft, "ifft_b:");
            
            std::vector<double> convAB = DSP::convolution(a_real, b_real);
            printVector(convAB, "conv:");

            return 0;
        }

        if (args[2] == "--conv") 
        {
            cVector a = {2, 3, 4, 1, 3, 5, 29, 1};
            cVector b = {6, -2, 3, 9};

            std::vector<double> a_real = {2, 3, 4, 1, 3, 5, 29, 1};
            std::vector<double> b_real = {6, -2, 3, 9};
                        
            std::vector<double> convAB = DSP::convolution(a_real, b_real);
            
            printVector(convAB, "conv:");

            return 0;
        }

        if (args[2] == "--fir")
        {
            // cutoff = -6dB
            std::vector<double> ir = FIR::designHamming(5500.0/48000.0, 1000.0/48000.0, FIR::LowPass);
            std::cout << ir.size() << std::endl;
            printVector(ir, "ir:", false);
            AudioFile<double> haha = AudioUtils::createAudioFile("../examples/midnight6.wav");
            std::vector<double> hahaSamples = haha.samples[0];
            std::string out = "low.wav";
            WavInfo info = AudioUtils::createWavInfo(&haha);
            info.bitDepth = 16;
            std::vector<double> conv = DSP::convolution(hahaSamples, ir);
            AudioFile<double> outFile = AudioUtils::samplesToAudioFile(conv, conv, info);
            AudioUtils::writeWavFile(outFile, out);
        }

        if (args[2] == "--interpolate")
        {
            std::vector<double> a = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
            std::vector<double> b = DSP::interpolateZeros(a, 2);
            printVector(b, "b:", true);
        }
    }